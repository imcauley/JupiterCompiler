Terminals unused in grammar

   BOOL_OP_UN_TOK


Rules useless in parser due to conflicts

    1 start: %empty
    2      | globaldeclarations


State 0 conflicts: 1 shift/reduce
State 6 conflicts: 1 shift/reduce
State 107 conflicts: 1 shift/reduce


Grammar

    0 $accept: start TYPE_DEF_TOK

    1 start: %empty
    2      | globaldeclarations

    3 literal: BOOL_LIT_TOK
    4        | STR_LIT_TOK
    5        | INT_LIT_TOK

    6 type: TYPE_DEF_TOK

    7 identifier: IDENTIFIER_TOK

    8 globaldeclarations: globaldeclaration
    9                   | globaldeclarations globaldeclaration

   10 globaldeclaration: variabledeclaration
   11                  | functiondeclaration
   12                  | mainfunctiondeclaration

   13 variabledeclaration: type identifier SEMICOLON_TOK

   14 functiondeclaration: functionheader block

   15 functionheader: type functiondeclarator

   16 functiondeclarator: identifier OPEN_PAREN_TOK formalparameterlist END_PAREN_TOK
   17                   | identifier OPEN_PAREN_TOK END_PAREN_TOK

   18 formalparameterlist: formalparameter
   19                    | formalparameterlist COMMA_TOK formalparameter

   20 formalparameter: type identifier

   21 mainfunctiondeclaration: mainfunctiondeclarator block

   22 mainfunctiondeclarator: identifier OPEN_PAREN_TOK END_PAREN_TOK

   23 block: OPEN_BRACE_TOK blockstatements END_BRACE_TOK
   24      | OPEN_BRACE_TOK END_BRACE_TOK

   25 blockstatements: blockstatement
   26                | blockstatements blockstatement

   27 blockstatement: variabledeclaration
   28               | statement

   29 statement: block
   30          | SEMICOLON_TOK
   31          | statementexpression SEMICOLON_TOK
   32          | BREAK_TOK SEMICOLON_TOK
   33          | RETURN_TOK expression SEMICOLON_TOK
   34          | RETURN_TOK SEMICOLON_TOK
   35          | IF_TOK OPEN_PAREN_TOK expression END_PAREN_TOK statement
   36          | IF_TOK OPEN_PAREN_TOK expression END_PAREN_TOK statement ELSE_TOK statement
   37          | WHILE_TOK OPEN_PAREN_TOK expression END_PAREN_TOK statement

   38 statementexpression: assignment
   39                    | functioninvocation

   40 primary: literal
   41        | OPEN_PAREN_TOK expression END_PAREN_TOK
   42        | functioninvocation

   43 argumentlist: expression
   44             | argumentlist COMMA_TOK expression

   45 functioninvocation: identifier OPEN_PAREN_TOK argumentlist END_PAREN_TOK
   46                   | identifier OPEN_PAREN_TOK END_PAREN_TOK

   47 postfixexpression: primary
   48                  | identifier

   49 unaryexpression: '-' unaryexpression
   50                | '!' unaryexpression
   51                | postfixexpression

   52 multiplicativeexpression: unaryexpression
   53                         | multiplicativeexpression INT_MULT_OP_TOK unaryexpression

   54 additiveexpression: multiplicativeexpression
   55                   | additiveexpression INT_ADD_OP_TOK multiplicativeexpression

   56 relationalexpression: additiveexpression
   57                     | relationalexpression INT_EQ_OP_TOK additiveexpression

   58 equalityexpression: relationalexpression
   59                   | equalityexpression EQUALITY_TOK relationalexpression

   60 conditionalandexpression: equalityexpression
   61                         | conditionalandexpression BOOL_OP_ADD_TOK equalityexpression

   62 conditionalorexpression: conditionalandexpression
   63                        | conditionalorexpression BOOL_OP_OR_TOK conditionalandexpression

   64 assignmentexpression: conditionalorexpression
   65                     | assignment

   66 assignment: identifier ASSIGNMENT_TOK assignmentexpression

   67 expression: assignmentexpression


Terminals, with rules where they appear

TYPE_DEF_TOK (0) 0 6
OPEN_PAREN_TOK (1) 16 17 22 35 36 37 41 45 46
END_PAREN_TOK (2) 16 17 22 35 36 37 41 45 46
OPEN_BRACE_TOK (3) 23 24
END_BRACE_TOK (4) 23 24
SEMICOLON_TOK (5) 13 30 31 32 33 34
COMMA_TOK (6) 19 44
INT_EQ_OP_TOK (7) 57
INT_ADD_OP_TOK (8) 55
INT_MULT_OP_TOK (9) 53
BOOL_OP_ADD_TOK (10) 61
BOOL_OP_OR_TOK (11) 63
BOOL_OP_UN_TOK (12)
EQUALITY_TOK (13) 59
ASSIGNMENT_TOK (14) 66
IDENTIFIER_TOK (15) 7
BOOL_LIT_TOK (16) 3
STR_LIT_TOK (17) 4
INT_LIT_TOK (18) 5
IF_TOK (19) 35 36
ELSE_TOK (20) 36
WHILE_TOK (21) 37
BREAK_TOK (22) 32
RETURN_TOK (23) 33 34
'!' (33) 50
'-' (45) 49
error (256)


Nonterminals, with rules where they appear

$accept (28)
    on left: 0
start (29)
    on left: 1 2, on right: 0
literal (30)
    on left: 3 4 5, on right: 40
type (31)
    on left: 6, on right: 13 15 20
identifier (32)
    on left: 7, on right: 13 16 17 20 22 45 46 48 66
globaldeclarations (33)
    on left: 8 9, on right: 2 9
globaldeclaration (34)
    on left: 10 11 12, on right: 8 9
variabledeclaration (35)
    on left: 13, on right: 10 27
functiondeclaration (36)
    on left: 14, on right: 11
functionheader (37)
    on left: 15, on right: 14
functiondeclarator (38)
    on left: 16 17, on right: 15
formalparameterlist (39)
    on left: 18 19, on right: 16 19
formalparameter (40)
    on left: 20, on right: 18 19
mainfunctiondeclaration (41)
    on left: 21, on right: 12
mainfunctiondeclarator (42)
    on left: 22, on right: 21
block (43)
    on left: 23 24, on right: 14 21 29
blockstatements (44)
    on left: 25 26, on right: 23 26
blockstatement (45)
    on left: 27 28, on right: 25 26
statement (46)
    on left: 29 30 31 32 33 34 35 36 37, on right: 28 35 36 37
statementexpression (47)
    on left: 38 39, on right: 31
primary (48)
    on left: 40 41 42, on right: 47
argumentlist (49)
    on left: 43 44, on right: 44 45
functioninvocation (50)
    on left: 45 46, on right: 39 42
postfixexpression (51)
    on left: 47 48, on right: 51
unaryexpression (52)
    on left: 49 50 51, on right: 49 50 52 53
multiplicativeexpression (53)
    on left: 52 53, on right: 53 54 55
additiveexpression (54)
    on left: 54 55, on right: 55 56 57
relationalexpression (55)
    on left: 56 57, on right: 57 58 59
equalityexpression (56)
    on left: 58 59, on right: 59 60 61
conditionalandexpression (57)
    on left: 60 61, on right: 61 62 63
conditionalorexpression (58)
    on left: 62 63, on right: 63 64
assignmentexpression (59)
    on left: 64 65, on right: 66 67
assignment (60)
    on left: 66, on right: 38 65
expression (61)
    on left: 67, on right: 33 35 36 37 41 43 44


State 0

    0 $accept: . start TYPE_DEF_TOK

    TYPE_DEF_TOK    shift, and go to state 1
    IDENTIFIER_TOK  shift, and go to state 2

    TYPE_DEF_TOK  [reduce using rule 1 (start)]

    start                    go to state 3
    type                     go to state 4
    identifier               go to state 5
    globaldeclarations       go to state 6
    globaldeclaration        go to state 7
    variabledeclaration      go to state 8
    functiondeclaration      go to state 9
    functionheader           go to state 10
    mainfunctiondeclaration  go to state 11
    mainfunctiondeclarator   go to state 12


State 1

    6 type: TYPE_DEF_TOK .

    $default  reduce using rule 6 (type)


State 2

    7 identifier: IDENTIFIER_TOK .

    $default  reduce using rule 7 (identifier)


State 3

    0 $accept: start . TYPE_DEF_TOK

    TYPE_DEF_TOK  shift, and go to state 13


State 4

   13 variabledeclaration: type . identifier SEMICOLON_TOK
   15 functionheader: type . functiondeclarator

    IDENTIFIER_TOK  shift, and go to state 2

    identifier          go to state 14
    functiondeclarator  go to state 15


State 5

   22 mainfunctiondeclarator: identifier . OPEN_PAREN_TOK END_PAREN_TOK

    OPEN_PAREN_TOK  shift, and go to state 16


State 6

    2 start: globaldeclarations .
    9 globaldeclarations: globaldeclarations . globaldeclaration

    TYPE_DEF_TOK    shift, and go to state 1
    IDENTIFIER_TOK  shift, and go to state 2

    TYPE_DEF_TOK  [reduce using rule 2 (start)]

    type                     go to state 4
    identifier               go to state 5
    globaldeclaration        go to state 17
    variabledeclaration      go to state 8
    functiondeclaration      go to state 9
    functionheader           go to state 10
    mainfunctiondeclaration  go to state 11
    mainfunctiondeclarator   go to state 12


State 7

    8 globaldeclarations: globaldeclaration .

    $default  reduce using rule 8 (globaldeclarations)


State 8

   10 globaldeclaration: variabledeclaration .

    $default  reduce using rule 10 (globaldeclaration)


State 9

   11 globaldeclaration: functiondeclaration .

    $default  reduce using rule 11 (globaldeclaration)


State 10

   14 functiondeclaration: functionheader . block

    OPEN_BRACE_TOK  shift, and go to state 18

    block  go to state 19


State 11

   12 globaldeclaration: mainfunctiondeclaration .

    $default  reduce using rule 12 (globaldeclaration)


State 12

   21 mainfunctiondeclaration: mainfunctiondeclarator . block

    OPEN_BRACE_TOK  shift, and go to state 18

    block  go to state 20


State 13

    0 $accept: start TYPE_DEF_TOK .

    $default  accept


State 14

   13 variabledeclaration: type identifier . SEMICOLON_TOK
   16 functiondeclarator: identifier . OPEN_PAREN_TOK formalparameterlist END_PAREN_TOK
   17                   | identifier . OPEN_PAREN_TOK END_PAREN_TOK

    OPEN_PAREN_TOK  shift, and go to state 21
    SEMICOLON_TOK   shift, and go to state 22


State 15

   15 functionheader: type functiondeclarator .

    $default  reduce using rule 15 (functionheader)


State 16

   22 mainfunctiondeclarator: identifier OPEN_PAREN_TOK . END_PAREN_TOK

    END_PAREN_TOK  shift, and go to state 23


State 17

    9 globaldeclarations: globaldeclarations globaldeclaration .

    $default  reduce using rule 9 (globaldeclarations)


State 18

   23 block: OPEN_BRACE_TOK . blockstatements END_BRACE_TOK
   24      | OPEN_BRACE_TOK . END_BRACE_TOK

    TYPE_DEF_TOK    shift, and go to state 1
    OPEN_BRACE_TOK  shift, and go to state 18
    END_BRACE_TOK   shift, and go to state 24
    SEMICOLON_TOK   shift, and go to state 25
    IDENTIFIER_TOK  shift, and go to state 2
    IF_TOK          shift, and go to state 26
    WHILE_TOK       shift, and go to state 27
    BREAK_TOK       shift, and go to state 28
    RETURN_TOK      shift, and go to state 29

    type                 go to state 30
    identifier           go to state 31
    variabledeclaration  go to state 32
    block                go to state 33
    blockstatements      go to state 34
    blockstatement       go to state 35
    statement            go to state 36
    statementexpression  go to state 37
    functioninvocation   go to state 38
    assignment           go to state 39


State 19

   14 functiondeclaration: functionheader block .

    $default  reduce using rule 14 (functiondeclaration)


State 20

   21 mainfunctiondeclaration: mainfunctiondeclarator block .

    $default  reduce using rule 21 (mainfunctiondeclaration)


State 21

   16 functiondeclarator: identifier OPEN_PAREN_TOK . formalparameterlist END_PAREN_TOK
   17                   | identifier OPEN_PAREN_TOK . END_PAREN_TOK

    TYPE_DEF_TOK   shift, and go to state 1
    END_PAREN_TOK  shift, and go to state 40

    type                 go to state 41
    formalparameterlist  go to state 42
    formalparameter      go to state 43


State 22

   13 variabledeclaration: type identifier SEMICOLON_TOK .

    $default  reduce using rule 13 (variabledeclaration)


State 23

   22 mainfunctiondeclarator: identifier OPEN_PAREN_TOK END_PAREN_TOK .

    $default  reduce using rule 22 (mainfunctiondeclarator)


State 24

   24 block: OPEN_BRACE_TOK END_BRACE_TOK .

    $default  reduce using rule 24 (block)


State 25

   30 statement: SEMICOLON_TOK .

    $default  reduce using rule 30 (statement)


State 26

   35 statement: IF_TOK . OPEN_PAREN_TOK expression END_PAREN_TOK statement
   36          | IF_TOK . OPEN_PAREN_TOK expression END_PAREN_TOK statement ELSE_TOK statement

    OPEN_PAREN_TOK  shift, and go to state 44


State 27

   37 statement: WHILE_TOK . OPEN_PAREN_TOK expression END_PAREN_TOK statement

    OPEN_PAREN_TOK  shift, and go to state 45


State 28

   32 statement: BREAK_TOK . SEMICOLON_TOK

    SEMICOLON_TOK  shift, and go to state 46


State 29

   33 statement: RETURN_TOK . expression SEMICOLON_TOK
   34          | RETURN_TOK . SEMICOLON_TOK

    OPEN_PAREN_TOK  shift, and go to state 47
    SEMICOLON_TOK   shift, and go to state 48
    IDENTIFIER_TOK  shift, and go to state 2
    BOOL_LIT_TOK    shift, and go to state 49
    STR_LIT_TOK     shift, and go to state 50
    INT_LIT_TOK     shift, and go to state 51
    '-'             shift, and go to state 52
    '!'             shift, and go to state 53

    literal                   go to state 54
    identifier                go to state 55
    primary                   go to state 56
    functioninvocation        go to state 57
    postfixexpression         go to state 58
    unaryexpression           go to state 59
    multiplicativeexpression  go to state 60
    additiveexpression        go to state 61
    relationalexpression      go to state 62
    equalityexpression        go to state 63
    conditionalandexpression  go to state 64
    conditionalorexpression   go to state 65
    assignmentexpression      go to state 66
    assignment                go to state 67
    expression                go to state 68


State 30

   13 variabledeclaration: type . identifier SEMICOLON_TOK

    IDENTIFIER_TOK  shift, and go to state 2

    identifier  go to state 69


State 31

   45 functioninvocation: identifier . OPEN_PAREN_TOK argumentlist END_PAREN_TOK
   46                   | identifier . OPEN_PAREN_TOK END_PAREN_TOK
   66 assignment: identifier . ASSIGNMENT_TOK assignmentexpression

    OPEN_PAREN_TOK  shift, and go to state 70
    ASSIGNMENT_TOK  shift, and go to state 71


State 32

   27 blockstatement: variabledeclaration .

    $default  reduce using rule 27 (blockstatement)


State 33

   29 statement: block .

    $default  reduce using rule 29 (statement)


State 34

   23 block: OPEN_BRACE_TOK blockstatements . END_BRACE_TOK
   26 blockstatements: blockstatements . blockstatement

    TYPE_DEF_TOK    shift, and go to state 1
    OPEN_BRACE_TOK  shift, and go to state 18
    END_BRACE_TOK   shift, and go to state 72
    SEMICOLON_TOK   shift, and go to state 25
    IDENTIFIER_TOK  shift, and go to state 2
    IF_TOK          shift, and go to state 26
    WHILE_TOK       shift, and go to state 27
    BREAK_TOK       shift, and go to state 28
    RETURN_TOK      shift, and go to state 29

    type                 go to state 30
    identifier           go to state 31
    variabledeclaration  go to state 32
    block                go to state 33
    blockstatement       go to state 73
    statement            go to state 36
    statementexpression  go to state 37
    functioninvocation   go to state 38
    assignment           go to state 39


State 35

   25 blockstatements: blockstatement .

    $default  reduce using rule 25 (blockstatements)


State 36

   28 blockstatement: statement .

    $default  reduce using rule 28 (blockstatement)


State 37

   31 statement: statementexpression . SEMICOLON_TOK

    SEMICOLON_TOK  shift, and go to state 74


State 38

   39 statementexpression: functioninvocation .

    $default  reduce using rule 39 (statementexpression)


State 39

   38 statementexpression: assignment .

    $default  reduce using rule 38 (statementexpression)


State 40

   17 functiondeclarator: identifier OPEN_PAREN_TOK END_PAREN_TOK .

    $default  reduce using rule 17 (functiondeclarator)


State 41

   20 formalparameter: type . identifier

    IDENTIFIER_TOK  shift, and go to state 2

    identifier  go to state 75


State 42

   16 functiondeclarator: identifier OPEN_PAREN_TOK formalparameterlist . END_PAREN_TOK
   19 formalparameterlist: formalparameterlist . COMMA_TOK formalparameter

    END_PAREN_TOK  shift, and go to state 76
    COMMA_TOK      shift, and go to state 77


State 43

   18 formalparameterlist: formalparameter .

    $default  reduce using rule 18 (formalparameterlist)


State 44

   35 statement: IF_TOK OPEN_PAREN_TOK . expression END_PAREN_TOK statement
   36          | IF_TOK OPEN_PAREN_TOK . expression END_PAREN_TOK statement ELSE_TOK statement

    OPEN_PAREN_TOK  shift, and go to state 47
    IDENTIFIER_TOK  shift, and go to state 2
    BOOL_LIT_TOK    shift, and go to state 49
    STR_LIT_TOK     shift, and go to state 50
    INT_LIT_TOK     shift, and go to state 51
    '-'             shift, and go to state 52
    '!'             shift, and go to state 53

    literal                   go to state 54
    identifier                go to state 55
    primary                   go to state 56
    functioninvocation        go to state 57
    postfixexpression         go to state 58
    unaryexpression           go to state 59
    multiplicativeexpression  go to state 60
    additiveexpression        go to state 61
    relationalexpression      go to state 62
    equalityexpression        go to state 63
    conditionalandexpression  go to state 64
    conditionalorexpression   go to state 65
    assignmentexpression      go to state 66
    assignment                go to state 67
    expression                go to state 78


State 45

   37 statement: WHILE_TOK OPEN_PAREN_TOK . expression END_PAREN_TOK statement

    OPEN_PAREN_TOK  shift, and go to state 47
    IDENTIFIER_TOK  shift, and go to state 2
    BOOL_LIT_TOK    shift, and go to state 49
    STR_LIT_TOK     shift, and go to state 50
    INT_LIT_TOK     shift, and go to state 51
    '-'             shift, and go to state 52
    '!'             shift, and go to state 53

    literal                   go to state 54
    identifier                go to state 55
    primary                   go to state 56
    functioninvocation        go to state 57
    postfixexpression         go to state 58
    unaryexpression           go to state 59
    multiplicativeexpression  go to state 60
    additiveexpression        go to state 61
    relationalexpression      go to state 62
    equalityexpression        go to state 63
    conditionalandexpression  go to state 64
    conditionalorexpression   go to state 65
    assignmentexpression      go to state 66
    assignment                go to state 67
    expression                go to state 79


State 46

   32 statement: BREAK_TOK SEMICOLON_TOK .

    $default  reduce using rule 32 (statement)


State 47

   41 primary: OPEN_PAREN_TOK . expression END_PAREN_TOK

    OPEN_PAREN_TOK  shift, and go to state 47
    IDENTIFIER_TOK  shift, and go to state 2
    BOOL_LIT_TOK    shift, and go to state 49
    STR_LIT_TOK     shift, and go to state 50
    INT_LIT_TOK     shift, and go to state 51
    '-'             shift, and go to state 52
    '!'             shift, and go to state 53

    literal                   go to state 54
    identifier                go to state 55
    primary                   go to state 56
    functioninvocation        go to state 57
    postfixexpression         go to state 58
    unaryexpression           go to state 59
    multiplicativeexpression  go to state 60
    additiveexpression        go to state 61
    relationalexpression      go to state 62
    equalityexpression        go to state 63
    conditionalandexpression  go to state 64
    conditionalorexpression   go to state 65
    assignmentexpression      go to state 66
    assignment                go to state 67
    expression                go to state 80


State 48

   34 statement: RETURN_TOK SEMICOLON_TOK .

    $default  reduce using rule 34 (statement)


State 49

    3 literal: BOOL_LIT_TOK .

    $default  reduce using rule 3 (literal)


State 50

    4 literal: STR_LIT_TOK .

    $default  reduce using rule 4 (literal)


State 51

    5 literal: INT_LIT_TOK .

    $default  reduce using rule 5 (literal)


State 52

   49 unaryexpression: '-' . unaryexpression

    OPEN_PAREN_TOK  shift, and go to state 47
    IDENTIFIER_TOK  shift, and go to state 2
    BOOL_LIT_TOK    shift, and go to state 49
    STR_LIT_TOK     shift, and go to state 50
    INT_LIT_TOK     shift, and go to state 51
    '-'             shift, and go to state 52
    '!'             shift, and go to state 53

    literal             go to state 54
    identifier          go to state 81
    primary             go to state 56
    functioninvocation  go to state 57
    postfixexpression   go to state 58
    unaryexpression     go to state 82


State 53

   50 unaryexpression: '!' . unaryexpression

    OPEN_PAREN_TOK  shift, and go to state 47
    IDENTIFIER_TOK  shift, and go to state 2
    BOOL_LIT_TOK    shift, and go to state 49
    STR_LIT_TOK     shift, and go to state 50
    INT_LIT_TOK     shift, and go to state 51
    '-'             shift, and go to state 52
    '!'             shift, and go to state 53

    literal             go to state 54
    identifier          go to state 81
    primary             go to state 56
    functioninvocation  go to state 57
    postfixexpression   go to state 58
    unaryexpression     go to state 83


State 54

   40 primary: literal .

    $default  reduce using rule 40 (primary)


State 55

   45 functioninvocation: identifier . OPEN_PAREN_TOK argumentlist END_PAREN_TOK
   46                   | identifier . OPEN_PAREN_TOK END_PAREN_TOK
   48 postfixexpression: identifier .
   66 assignment: identifier . ASSIGNMENT_TOK assignmentexpression

    OPEN_PAREN_TOK  shift, and go to state 70
    ASSIGNMENT_TOK  shift, and go to state 71

    $default  reduce using rule 48 (postfixexpression)


State 56

   47 postfixexpression: primary .

    $default  reduce using rule 47 (postfixexpression)


State 57

   42 primary: functioninvocation .

    $default  reduce using rule 42 (primary)


State 58

   51 unaryexpression: postfixexpression .

    $default  reduce using rule 51 (unaryexpression)


State 59

   52 multiplicativeexpression: unaryexpression .

    $default  reduce using rule 52 (multiplicativeexpression)


State 60

   53 multiplicativeexpression: multiplicativeexpression . INT_MULT_OP_TOK unaryexpression
   54 additiveexpression: multiplicativeexpression .

    INT_MULT_OP_TOK  shift, and go to state 84

    $default  reduce using rule 54 (additiveexpression)


State 61

   55 additiveexpression: additiveexpression . INT_ADD_OP_TOK multiplicativeexpression
   56 relationalexpression: additiveexpression .

    INT_ADD_OP_TOK  shift, and go to state 85

    $default  reduce using rule 56 (relationalexpression)


State 62

   57 relationalexpression: relationalexpression . INT_EQ_OP_TOK additiveexpression
   58 equalityexpression: relationalexpression .

    INT_EQ_OP_TOK  shift, and go to state 86

    $default  reduce using rule 58 (equalityexpression)


State 63

   59 equalityexpression: equalityexpression . EQUALITY_TOK relationalexpression
   60 conditionalandexpression: equalityexpression .

    EQUALITY_TOK  shift, and go to state 87

    $default  reduce using rule 60 (conditionalandexpression)


State 64

   61 conditionalandexpression: conditionalandexpression . BOOL_OP_ADD_TOK equalityexpression
   62 conditionalorexpression: conditionalandexpression .

    BOOL_OP_ADD_TOK  shift, and go to state 88

    $default  reduce using rule 62 (conditionalorexpression)


State 65

   63 conditionalorexpression: conditionalorexpression . BOOL_OP_OR_TOK conditionalandexpression
   64 assignmentexpression: conditionalorexpression .

    BOOL_OP_OR_TOK  shift, and go to state 89

    $default  reduce using rule 64 (assignmentexpression)


State 66

   67 expression: assignmentexpression .

    $default  reduce using rule 67 (expression)


State 67

   65 assignmentexpression: assignment .

    $default  reduce using rule 65 (assignmentexpression)


State 68

   33 statement: RETURN_TOK expression . SEMICOLON_TOK

    SEMICOLON_TOK  shift, and go to state 90


State 69

   13 variabledeclaration: type identifier . SEMICOLON_TOK

    SEMICOLON_TOK  shift, and go to state 22


State 70

   45 functioninvocation: identifier OPEN_PAREN_TOK . argumentlist END_PAREN_TOK
   46                   | identifier OPEN_PAREN_TOK . END_PAREN_TOK

    OPEN_PAREN_TOK  shift, and go to state 47
    END_PAREN_TOK   shift, and go to state 91
    IDENTIFIER_TOK  shift, and go to state 2
    BOOL_LIT_TOK    shift, and go to state 49
    STR_LIT_TOK     shift, and go to state 50
    INT_LIT_TOK     shift, and go to state 51
    '-'             shift, and go to state 52
    '!'             shift, and go to state 53

    literal                   go to state 54
    identifier                go to state 55
    primary                   go to state 56
    argumentlist              go to state 92
    functioninvocation        go to state 57
    postfixexpression         go to state 58
    unaryexpression           go to state 59
    multiplicativeexpression  go to state 60
    additiveexpression        go to state 61
    relationalexpression      go to state 62
    equalityexpression        go to state 63
    conditionalandexpression  go to state 64
    conditionalorexpression   go to state 65
    assignmentexpression      go to state 66
    assignment                go to state 67
    expression                go to state 93


State 71

   66 assignment: identifier ASSIGNMENT_TOK . assignmentexpression

    OPEN_PAREN_TOK  shift, and go to state 47
    IDENTIFIER_TOK  shift, and go to state 2
    BOOL_LIT_TOK    shift, and go to state 49
    STR_LIT_TOK     shift, and go to state 50
    INT_LIT_TOK     shift, and go to state 51
    '-'             shift, and go to state 52
    '!'             shift, and go to state 53

    literal                   go to state 54
    identifier                go to state 55
    primary                   go to state 56
    functioninvocation        go to state 57
    postfixexpression         go to state 58
    unaryexpression           go to state 59
    multiplicativeexpression  go to state 60
    additiveexpression        go to state 61
    relationalexpression      go to state 62
    equalityexpression        go to state 63
    conditionalandexpression  go to state 64
    conditionalorexpression   go to state 65
    assignmentexpression      go to state 94
    assignment                go to state 67


State 72

   23 block: OPEN_BRACE_TOK blockstatements END_BRACE_TOK .

    $default  reduce using rule 23 (block)


State 73

   26 blockstatements: blockstatements blockstatement .

    $default  reduce using rule 26 (blockstatements)


State 74

   31 statement: statementexpression SEMICOLON_TOK .

    $default  reduce using rule 31 (statement)


State 75

   20 formalparameter: type identifier .

    $default  reduce using rule 20 (formalparameter)


State 76

   16 functiondeclarator: identifier OPEN_PAREN_TOK formalparameterlist END_PAREN_TOK .

    $default  reduce using rule 16 (functiondeclarator)


State 77

   19 formalparameterlist: formalparameterlist COMMA_TOK . formalparameter

    TYPE_DEF_TOK  shift, and go to state 1

    type             go to state 41
    formalparameter  go to state 95


State 78

   35 statement: IF_TOK OPEN_PAREN_TOK expression . END_PAREN_TOK statement
   36          | IF_TOK OPEN_PAREN_TOK expression . END_PAREN_TOK statement ELSE_TOK statement

    END_PAREN_TOK  shift, and go to state 96


State 79

   37 statement: WHILE_TOK OPEN_PAREN_TOK expression . END_PAREN_TOK statement

    END_PAREN_TOK  shift, and go to state 97


State 80

   41 primary: OPEN_PAREN_TOK expression . END_PAREN_TOK

    END_PAREN_TOK  shift, and go to state 98


State 81

   45 functioninvocation: identifier . OPEN_PAREN_TOK argumentlist END_PAREN_TOK
   46                   | identifier . OPEN_PAREN_TOK END_PAREN_TOK
   48 postfixexpression: identifier .

    OPEN_PAREN_TOK  shift, and go to state 70

    $default  reduce using rule 48 (postfixexpression)


State 82

   49 unaryexpression: '-' unaryexpression .

    $default  reduce using rule 49 (unaryexpression)


State 83

   50 unaryexpression: '!' unaryexpression .

    $default  reduce using rule 50 (unaryexpression)


State 84

   53 multiplicativeexpression: multiplicativeexpression INT_MULT_OP_TOK . unaryexpression

    OPEN_PAREN_TOK  shift, and go to state 47
    IDENTIFIER_TOK  shift, and go to state 2
    BOOL_LIT_TOK    shift, and go to state 49
    STR_LIT_TOK     shift, and go to state 50
    INT_LIT_TOK     shift, and go to state 51
    '-'             shift, and go to state 52
    '!'             shift, and go to state 53

    literal             go to state 54
    identifier          go to state 81
    primary             go to state 56
    functioninvocation  go to state 57
    postfixexpression   go to state 58
    unaryexpression     go to state 99


State 85

   55 additiveexpression: additiveexpression INT_ADD_OP_TOK . multiplicativeexpression

    OPEN_PAREN_TOK  shift, and go to state 47
    IDENTIFIER_TOK  shift, and go to state 2
    BOOL_LIT_TOK    shift, and go to state 49
    STR_LIT_TOK     shift, and go to state 50
    INT_LIT_TOK     shift, and go to state 51
    '-'             shift, and go to state 52
    '!'             shift, and go to state 53

    literal                   go to state 54
    identifier                go to state 81
    primary                   go to state 56
    functioninvocation        go to state 57
    postfixexpression         go to state 58
    unaryexpression           go to state 59
    multiplicativeexpression  go to state 100


State 86

   57 relationalexpression: relationalexpression INT_EQ_OP_TOK . additiveexpression

    OPEN_PAREN_TOK  shift, and go to state 47
    IDENTIFIER_TOK  shift, and go to state 2
    BOOL_LIT_TOK    shift, and go to state 49
    STR_LIT_TOK     shift, and go to state 50
    INT_LIT_TOK     shift, and go to state 51
    '-'             shift, and go to state 52
    '!'             shift, and go to state 53

    literal                   go to state 54
    identifier                go to state 81
    primary                   go to state 56
    functioninvocation        go to state 57
    postfixexpression         go to state 58
    unaryexpression           go to state 59
    multiplicativeexpression  go to state 60
    additiveexpression        go to state 101


State 87

   59 equalityexpression: equalityexpression EQUALITY_TOK . relationalexpression

    OPEN_PAREN_TOK  shift, and go to state 47
    IDENTIFIER_TOK  shift, and go to state 2
    BOOL_LIT_TOK    shift, and go to state 49
    STR_LIT_TOK     shift, and go to state 50
    INT_LIT_TOK     shift, and go to state 51
    '-'             shift, and go to state 52
    '!'             shift, and go to state 53

    literal                   go to state 54
    identifier                go to state 81
    primary                   go to state 56
    functioninvocation        go to state 57
    postfixexpression         go to state 58
    unaryexpression           go to state 59
    multiplicativeexpression  go to state 60
    additiveexpression        go to state 61
    relationalexpression      go to state 102


State 88

   61 conditionalandexpression: conditionalandexpression BOOL_OP_ADD_TOK . equalityexpression

    OPEN_PAREN_TOK  shift, and go to state 47
    IDENTIFIER_TOK  shift, and go to state 2
    BOOL_LIT_TOK    shift, and go to state 49
    STR_LIT_TOK     shift, and go to state 50
    INT_LIT_TOK     shift, and go to state 51
    '-'             shift, and go to state 52
    '!'             shift, and go to state 53

    literal                   go to state 54
    identifier                go to state 81
    primary                   go to state 56
    functioninvocation        go to state 57
    postfixexpression         go to state 58
    unaryexpression           go to state 59
    multiplicativeexpression  go to state 60
    additiveexpression        go to state 61
    relationalexpression      go to state 62
    equalityexpression        go to state 103


State 89

   63 conditionalorexpression: conditionalorexpression BOOL_OP_OR_TOK . conditionalandexpression

    OPEN_PAREN_TOK  shift, and go to state 47
    IDENTIFIER_TOK  shift, and go to state 2
    BOOL_LIT_TOK    shift, and go to state 49
    STR_LIT_TOK     shift, and go to state 50
    INT_LIT_TOK     shift, and go to state 51
    '-'             shift, and go to state 52
    '!'             shift, and go to state 53

    literal                   go to state 54
    identifier                go to state 81
    primary                   go to state 56
    functioninvocation        go to state 57
    postfixexpression         go to state 58
    unaryexpression           go to state 59
    multiplicativeexpression  go to state 60
    additiveexpression        go to state 61
    relationalexpression      go to state 62
    equalityexpression        go to state 63
    conditionalandexpression  go to state 104


State 90

   33 statement: RETURN_TOK expression SEMICOLON_TOK .

    $default  reduce using rule 33 (statement)


State 91

   46 functioninvocation: identifier OPEN_PAREN_TOK END_PAREN_TOK .

    $default  reduce using rule 46 (functioninvocation)


State 92

   44 argumentlist: argumentlist . COMMA_TOK expression
   45 functioninvocation: identifier OPEN_PAREN_TOK argumentlist . END_PAREN_TOK

    END_PAREN_TOK  shift, and go to state 105
    COMMA_TOK      shift, and go to state 106


State 93

   43 argumentlist: expression .

    $default  reduce using rule 43 (argumentlist)


State 94

   66 assignment: identifier ASSIGNMENT_TOK assignmentexpression .

    $default  reduce using rule 66 (assignment)


State 95

   19 formalparameterlist: formalparameterlist COMMA_TOK formalparameter .

    $default  reduce using rule 19 (formalparameterlist)


State 96

   35 statement: IF_TOK OPEN_PAREN_TOK expression END_PAREN_TOK . statement
   36          | IF_TOK OPEN_PAREN_TOK expression END_PAREN_TOK . statement ELSE_TOK statement

    OPEN_BRACE_TOK  shift, and go to state 18
    SEMICOLON_TOK   shift, and go to state 25
    IDENTIFIER_TOK  shift, and go to state 2
    IF_TOK          shift, and go to state 26
    WHILE_TOK       shift, and go to state 27
    BREAK_TOK       shift, and go to state 28
    RETURN_TOK      shift, and go to state 29

    identifier           go to state 31
    block                go to state 33
    statement            go to state 107
    statementexpression  go to state 37
    functioninvocation   go to state 38
    assignment           go to state 39


State 97

   37 statement: WHILE_TOK OPEN_PAREN_TOK expression END_PAREN_TOK . statement

    OPEN_BRACE_TOK  shift, and go to state 18
    SEMICOLON_TOK   shift, and go to state 25
    IDENTIFIER_TOK  shift, and go to state 2
    IF_TOK          shift, and go to state 26
    WHILE_TOK       shift, and go to state 27
    BREAK_TOK       shift, and go to state 28
    RETURN_TOK      shift, and go to state 29

    identifier           go to state 31
    block                go to state 33
    statement            go to state 108
    statementexpression  go to state 37
    functioninvocation   go to state 38
    assignment           go to state 39


State 98

   41 primary: OPEN_PAREN_TOK expression END_PAREN_TOK .

    $default  reduce using rule 41 (primary)


State 99

   53 multiplicativeexpression: multiplicativeexpression INT_MULT_OP_TOK unaryexpression .

    $default  reduce using rule 53 (multiplicativeexpression)


State 100

   53 multiplicativeexpression: multiplicativeexpression . INT_MULT_OP_TOK unaryexpression
   55 additiveexpression: additiveexpression INT_ADD_OP_TOK multiplicativeexpression .

    INT_MULT_OP_TOK  shift, and go to state 84

    $default  reduce using rule 55 (additiveexpression)


State 101

   55 additiveexpression: additiveexpression . INT_ADD_OP_TOK multiplicativeexpression
   57 relationalexpression: relationalexpression INT_EQ_OP_TOK additiveexpression .

    INT_ADD_OP_TOK  shift, and go to state 85

    $default  reduce using rule 57 (relationalexpression)


State 102

   57 relationalexpression: relationalexpression . INT_EQ_OP_TOK additiveexpression
   59 equalityexpression: equalityexpression EQUALITY_TOK relationalexpression .

    INT_EQ_OP_TOK  shift, and go to state 86

    $default  reduce using rule 59 (equalityexpression)


State 103

   59 equalityexpression: equalityexpression . EQUALITY_TOK relationalexpression
   61 conditionalandexpression: conditionalandexpression BOOL_OP_ADD_TOK equalityexpression .

    EQUALITY_TOK  shift, and go to state 87

    $default  reduce using rule 61 (conditionalandexpression)


State 104

   61 conditionalandexpression: conditionalandexpression . BOOL_OP_ADD_TOK equalityexpression
   63 conditionalorexpression: conditionalorexpression BOOL_OP_OR_TOK conditionalandexpression .

    BOOL_OP_ADD_TOK  shift, and go to state 88

    $default  reduce using rule 63 (conditionalorexpression)


State 105

   45 functioninvocation: identifier OPEN_PAREN_TOK argumentlist END_PAREN_TOK .

    $default  reduce using rule 45 (functioninvocation)


State 106

   44 argumentlist: argumentlist COMMA_TOK . expression

    OPEN_PAREN_TOK  shift, and go to state 47
    IDENTIFIER_TOK  shift, and go to state 2
    BOOL_LIT_TOK    shift, and go to state 49
    STR_LIT_TOK     shift, and go to state 50
    INT_LIT_TOK     shift, and go to state 51
    '-'             shift, and go to state 52
    '!'             shift, and go to state 53

    literal                   go to state 54
    identifier                go to state 55
    primary                   go to state 56
    functioninvocation        go to state 57
    postfixexpression         go to state 58
    unaryexpression           go to state 59
    multiplicativeexpression  go to state 60
    additiveexpression        go to state 61
    relationalexpression      go to state 62
    equalityexpression        go to state 63
    conditionalandexpression  go to state 64
    conditionalorexpression   go to state 65
    assignmentexpression      go to state 66
    assignment                go to state 67
    expression                go to state 109


State 107

   35 statement: IF_TOK OPEN_PAREN_TOK expression END_PAREN_TOK statement .
   36          | IF_TOK OPEN_PAREN_TOK expression END_PAREN_TOK statement . ELSE_TOK statement

    ELSE_TOK  shift, and go to state 110

    ELSE_TOK  [reduce using rule 35 (statement)]
    $default  reduce using rule 35 (statement)


State 108

   37 statement: WHILE_TOK OPEN_PAREN_TOK expression END_PAREN_TOK statement .

    $default  reduce using rule 37 (statement)


State 109

   44 argumentlist: argumentlist COMMA_TOK expression .

    $default  reduce using rule 44 (argumentlist)


State 110

   36 statement: IF_TOK OPEN_PAREN_TOK expression END_PAREN_TOK statement ELSE_TOK . statement

    OPEN_BRACE_TOK  shift, and go to state 18
    SEMICOLON_TOK   shift, and go to state 25
    IDENTIFIER_TOK  shift, and go to state 2
    IF_TOK          shift, and go to state 26
    WHILE_TOK       shift, and go to state 27
    BREAK_TOK       shift, and go to state 28
    RETURN_TOK      shift, and go to state 29

    identifier           go to state 31
    block                go to state 33
    statement            go to state 111
    statementexpression  go to state 37
    functioninvocation   go to state 38
    assignment           go to state 39


State 111

   36 statement: IF_TOK OPEN_PAREN_TOK expression END_PAREN_TOK statement ELSE_TOK statement .

    $default  reduce using rule 36 (statement)
